
======================================
--------------> Aula 1 <--------------
======================================

----------------------------------
----> Ferramentas adicionais <----
----------------------------------
pip install pipx     % Install and Run Python Applications in Isolated Environments
pipx install poetry  % Dependency management and packaging in Python
pipx ensurepath      % Ensure directory where pipx stores apps is in your PATH environment variable

% reiniciar o terminal para aplicar as mudanças nas variáveis de ambiente após rodar o comando pipx ensure path

sudo apt install gh  % Take GitHub to the command line


----------------------------------
----> Estruturando o Projeto <----
----------------------------------
poetry new fast_api   % Cria uma pasta nomeada fast_api com a estrutura do projeto e entre nela
poetry install        % Inicia um ambiente para o desenvolvimento
poetry add fastapi    % Instala o FastAPI 

poetry shell          % Ativa o ambiente de desenvolvimento criado com poetry

fastapi dev fast_api/app.py   % Inicia o servidor "web" do FastAPI

poetry add --group dev ruff                 % Ferramenta linter e formatter
poetry add --group dev pytest pytest-cov    % Framework de testes
poetry add --group dev taskipy              % 

% Adicionar as configurações do ruff, pytest e taskipy no pyproject.toml


git init      % --------------------------------------------------------------> Inicia um repositório git
git add .     % --------------------------------------------------------------> Adiciona todas as alterações na áre de stage
git commit -m "WIP: Estrutura e configuração do ambiente de desenvolvimento"  % Executa um commit das alterações


gh auth login    % Para realizar a autenticação da ferramenta CLI com o seu GitHub
gh repo create   % Para criar um repositório no GitHub

git remote add origin https://github.com/rafaelmartinisilva/Frist-FastAPI-APP.git

git push --set-upstream origin main



======================================
--------------> Aula 2 <--------------
======================================

poetry add "pydantic[email]"   % Pacode adicional do pydantic para validar e-mails.



======================================
--------------> Aula 3 <--------------
======================================



======================================
--------------> Aula 4 <--------------
======================================

poetry add sqlalchemy

poetry add pydantic-settings

% Criar um arquivo ".env" na raiz da aplicação e inserir o DATABASE_URL com o caminho do banco de dados.

poetry add alembic  % Gerencia migrações de DB

alembic init migrations   % inicia a estutura do alembic na pasta migrations

% Após realizar todas as configurações, executar o comando abaixo para criar uma versão do DB

alembic revision --autogenerate -m "create users table"

alembic upgrade head  % Aplica a migração/Atualiza a versão do DB

% Para atualizar as colunas do SQLITE, não é possível utilizar o "op.alter_column" do alembic. Dessa foram,
% se faz necessário utilizar a implementação do "op.batch_alter_table". Então, deve-se alterar os campos neces-
% sários do schema pertinente, gerar os alembic revision, abrir a versão da migração gerada e modificá-la
% com o context manager apropriado.



======================================
--------------> Aula 5 <--------------
======================================



======================================
--------------> Aula 6 <--------------
======================================

% pwdlib -> Biblioteca para gerenciar senhas e manipular senhas
% argon2 -> Algoritmo de hash
poetry add "pwdlib[argon2]"

% Deve-se, também, instalar uma bibliote para multipart
poetry add python-multipart

% Biblioteca para gerar o JWT (Json Web Token) para assinatura do servidor
poetry add pyjwt



======================================
--------------> Aula 7 <--------------
======================================



======================================
--------------> Aula 8 <--------------
======================================

% factory-boy -> Biblioteca de fábrica de modelos para automatizar a adição de vários usuário no banco de dados
poetry add --group dev factory-boy

% freezegun -> Biblioteca de controle do tempo para realizar testes que envolvem token expirados
poetry add --group dev freezegun




======================================
--------------> Aula 9 <--------------
======================================

% Após modificar os models.py para criar a tabela para receber as tarefas Todo, deve-se realizar a migração do banco de dados

alembic revision --autogenerate -m "create todos table"
alembic upgrade head



% Acrescentar duas colunas no DB Todo (created_at e updated_at), executar o comando abaixo para criar uma versão do DB

alembic revision --autogenerate -m "create created_at and updated_at fields"

% Para atualizar as colunas do SQLITE, não é possível utilizar o "op.alter_column" do alembic. Dessa foram,
% se faz necessário utilizar a implementação do "op.batch_alter_table". Então, deve-se alterar os campos neces-
% sários do schema pertinente, gerar os alembic revision, abrir a versão da migração gerada e modificá-la
% com o context manager apropriado.

% OBS.: Não consegui fazer a migração do estado atual do banco (com alguns usuários já criados). Tive que deletar o database.db 
% e aplicar o alembic upgrade head para gerar o DB do zero, pois estava dando erro quando ia criar a coluna created_at nos 
% usuários existentes

alembic upgrade head  % Aplica a migração/Atualiza a versão do DB




=======================================
--------------> Aula 10 <--------------
=======================================


% O banco de dados será alterado do SQLite para o Postgres. Para isso, deve-se, primeiramente, executar o postgres com docker
docker run \
    --name app_database \
    -e POSTGRES_USER=app_user \
    -e POSTGRES_DB=app_db \
    -e POSTGRES_PASSWORD=app_password \
    -p 5432:5432 \
    postgres


% Precisamos instalar o driver para o postgres na nossa aplicação:
poetry add "psycopg[binary]"

% Depois, deve-se aplicar as migrações para o novo DB
alembic upgrade head

% Para testar a aplicação sem alterar o banco de dados de produção executado nos passos anteriores, pode-se utilizar uma ferramenta 
% que gerencia automaticamente container, fazendo-se com que o banco de dados de teste em container seja executado de forma transparente.

poetry add --group dev testcontainers
